*toggle-terminal*                             Plugin to toggle a terminal window

CONTENTS                                              *toggle-terminal-contents*

Introduction .................. |toggle-terminal-introduction|
Commands ...................... |toggle-terminal-cmd|
  clear ....................... |toggle-terminal-cmd-clear|
  exit ........................ |toggle-terminal-cmd-exit|
  jump ........................ |toggle-terminal-cmd-jump|
  kill ........................ |toggle-terminal-cmd-kill|
  run_previous ................ |toggle-terminal-cmd-run_previous|
  send_current_line ........... |toggle-terminal-cmd-send_current_line|
  send_visual_lines ........... |toggle-terminal-cmd-send_visual_lines|
  toggle_fullheight ........... |toggle-terminal-cmd-toggle_fullheight|
  toggle_window ............... |toggle-terminal-cmd-toggle_window|
Examples ...................... |toggle-terminal-cmd-examples
Configuration ................. |toggle-terminal-configuration|


INTRODUCTION                                      *toggle-terminal-introduction*

Toggle-terminal is a plugin for nvim that can spone a terminal in a dedicated
buffer, display the terminal buffer is a split window, and toggle this window.
There can be only one terminal buffer that Toggle-terminal know about, called
"main terminal" through this documentation. If the main terminal is exited
(ie. the terminal processus ends), a new terminal instance will be created
next time toggle-terminal is summoned.


COMMANDS                                        *:Terminal*  *toggle-terminal-cmd*

Toggle-terminal provide only one user command |:Terminal| and does not define
any default keybindings for nvim. The |:Terminal| command takes at least one
argument which is the subcommand name. The subcommand may (or may not) have
arguments.

`:Terminal <subcommand> [args...]`

The subcommands are listed below.


SUBCOMMAND CLEAR                                     *toggle-terminal-cmd-clear*

Clear the terminal window, without entering the terminal buffer.


SUBCOMMAND EXIT                                       *toggle-terminal-cmd-exit*

Exit the terminal processus, without entering the terminal buffer.


SUBCOMMAND JUMP                                       *toggle-terminal-cmd-jump*

Jump from the stacktrace to the corresponding problematic code.


SUBCOMMAND KILL                                       *toggle-terminal-cmd-kill*

Kill the currently running comment, without entering the terminal buffer.


SUBCOMMAND RUN_PREVIOUS                       *toggle-terminal-cmd-run_previous*

Run privous command, without entering the terminal buffer.


SUBCOMMAND SEND_CURRENT_LINE             *toggle-terminal-cmd-send_current_line*

Send current line to the terminal buffer. Create the terminal buffer if it
does not exist yet.


SUBCOMMAND SEND_VISUAL_LINES             *toggle-terminal-cmd-send_visual_lines*

Send selected lines to the terminal buffer. Create the terminal buffer if it
does not exist yet.


SUBCOMMAND TOGGLE_FULLHEIGHT             *toggle-terminal-cmd-toggle_fullheight*

Allow the user to toggle the terminal height when it's window is displayed. It
will resize the terminal window in such a way that it will occupy the maximum
height (leaving only one line for the top window). Note that the height is
relative to the whole neovim height (vim.o.lines) and not the height of the
current window.


SUBCOMMAND TOGGLE_WINDOW                     *toggle-terminal-cmd-toggle_window*

The subcommand `toggle_window` does two things:

1. The first time it is called (or if the main terminal is exited): create a
   new buffer, open a terminal in this buffer and display the buffer in a
   split window below the current one
2. Every other times: toggle a split window displaying the main terminal

This command take optionally one argument: the relative height of the terminal
window.

NB: the cursor can be on any window to close the terminal window with
`:Terminal`


EXAMPLES                                          *toggle-terminal-cmd-examples*

Here are some usage examples.
>vim
    " Create a split window and open a new terminal.
    " When no argument is given to the toggle_window subcommand, it will use
    " the default `relative_height` that can be set through the setup function
    " (See CONFIGURATION below).
    :Terminal toggle_window

    " Close the window (the terminal will still run in the background)
    :Terminal toggle_window

    " Open the terminal again, this time occupying 80% of the current window
    :Terminal toggle_window 0.8

    " Close the terminal window again
    :Terminal toggle_window

    " Terminal buffer is unlisted
    :ls

    " You can see the terminal buffer this way
    :ls!

    " open a terminal window occupying 30% of the current height
    :Terminal toggle_window 0.3

    " 30% is not enough to see well... Let's increase the terminal height to
    " the maximum
    :Terminal toggle_fullheight

    " back to 30%
    :Terminal toggle_fullheight

    " When on a stacktrace, jump to the corresponding problematic code
    :Terminal jump

    " Send current line to the terminal buffer
    :Terminal send_current_line

    " Send currently selected lines to the terminal buffer
    :Terminal send_visual_lines

    " Run previously executed command without leaving your current buffer
    :Terminal run_previous

    " This command takes too much time... kill it without leaving your current buffer
    :Terminal kill

    " Clear terminal window without leaving your current buffer
    :Terminal clear

    " You dont need your terminal anymore, you can exit it without leaving your buffer
    :Terminal exit
<

CONFIGURATION                                    *toggle-terminal-configuration*

Default configuration:
>lua
    require("toggle-terminal").setup {}
<

Advanced configuration:
>lua
    require('toggle-terminal').setup {
        bg_color = '#000000',  -- main terminal background color
        startinsert = false,  -- start insert mode at term opening
        relative_height = 0.35,  -- relative height of the terminal window
        local_options = {
            number = false,  -- no number in main terminal window
            relativenumber = false,  -- no relative number in main terminal window
            cursorline = false,  -- cursor line in main terminal window
            colorcolumn = '',  -- color column
        },
        stacktrace_patterns = {
            '([^ ]*):([0-9]):', -- lua
            '^ *File "(.*)", line ([0-9]+)',  -- python
            '^(.*): line ([0-9]+)',  -- bash
        },
    }
<

vim:tw=80:ts=2:et:ft=help:cc=+1:
